Module = [{ Decl# | Using | ";" }]
Using = "using" <Str> ";"

Code = ( "{" [{ Line }] "}" ) | Line
Line = If | While | DoWhile | For | Code | Decl# | ( [ ( "return" Value ) | "break" | "continue" | Value ] ";" )
If = "if" "(" Value ")" Code [ "else" Code ]
While = "while" "(" Value ")" Code
DoWhile = "do" Code "while" "(" Value ")" ";"
For := "for" "(" Decl# | ( [ Value ] ";" ) [ Value ] ";" [ Value ] ")" Code

Value = Comma
AssignValue = Assign
Comma = Assign [{ "," Assign }]
Assign = Ternary [ "=" | "+=" | "-=" | "*=" | "/=" | "|=" | "^=" Assign ]
Ternary = Bool [ "?" Value ":" Ternary ]
Bool = Equality [{ "&&" | "||" | "&" | "|" | "^" Equality }]
Equality = Shift [{ "==" | "!=" | ">" | ">=" | "<" | "<=" Shift }]
Shift = Expr [{ ">>" | "<<" Expr }]
Expr = Term [{ "+" | "-" Term }]
Term = Unary [{ "*" | "/" | "%" Unary }]
Unary = ( "!" | "~" | "-" | "*" | "&" | "++" | "--" Unary ) | PostUnary
PostUnary = Object [{ "++" | "--" }]
Object = Factor [{   ( "[" Value "]" )
                   | ( "(" [ AssignValue [{ "," AssignValue }] ] ")" )
                   | ( "." | "->" <Ident> ) }]
Factor =   ( "(" Value ")" )
         | ( "(" Type ")" Unary )
         | ( [ "(" Type ")" ] "{" [ AssignValue [{ "," [ AssignValue ] }] ] "}" )
         | ( "sizeof" ( "(" Type | Value ")" ) | Unary )
         | <Int> | <Bool> | <Str> | <Char> | <Ident>

Type = DeclBasic DeclExpr#
Decl = Storage DeclBasic ";" | ( DeclExpr#   ( [{ "," DeclExpr# }] ";" )
									       | Code# )

Field = DeclBasic [ DeclExpr# [{ "," DeclExpr# }] ] ";"
EnumField = Name# [ "=" AssignValue ]
Param = DeclBasic DeclExpr#

Storage = [ "auto" | "static" | "extern" | "typedef" ]
DeclBasic = [ "const" ] <Ident> | StructOrUnion | Enum
StructOrUnion = "struct" | "union" Name# ^ ( "{" [{ Field }] "}" )
Enum = "enum" Name# ^ ( "{" EnumField [{ "," EnumField }] "}" )

DeclExpr = DeclUnary [ "=" AssignValue ]
DeclUnary = ( "*" | "const" DeclUnary ) | DeclObject
DeclObject = DeclAtom [{ DeclFunction | ( "[" Value "]" ) }]
DeclFunction = "(" [ ( Param [{ "," Param }] [ "," "..." ] ) | "..." | "void" ] ")"
DeclAtom = [ ( "(" DeclExpr ")" ) | Name ]
Name = <UnqualifiedIdent>
